import psycopg2
import csv

# Подключение к БД
conn = psycopg2.connect(
    dbname="your_db_name",
    user="your_user",
    password="your_password",
    host="localhost",
    port="5432"
)
cur = conn.cursor()

def create_table():
    cur.execute("""
        CREATE TABLE IF NOT EXISTS phonebook (
            id SERIAL PRIMARY KEY,
            first_name VARCHAR(50) NOT NULL,
            phone VARCHAR(20) UNIQUE NOT NULL
        );
    """)
    conn.commit()

def insert_from_csv(file_path):
    with open(file_path, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # skip header
        for row in reader:
            try:
                cur.execute("INSERT INTO phonebook (first_name, phone) VALUES (%s, %s)", (row[0], row[1]))
            except Exception as e:
                print(f"Error inserting {row}: {e}")
    conn.commit()

def insert_from_console():
    name = input("Enter name: ")
    phone = input("Enter phone: ")
    try:
        cur.execute("CALL insert_or_update_user(%s, %s)", (name, phone))
        conn.commit()
    except Exception as e:
        print(f"Error: {e}")
        conn.rollback()

def update_user(identifier, new_name=None, new_phone=None):
    if new_name:
        cur.execute("UPDATE phonebook SET first_name = %s WHERE phone = %s OR first_name = %s", (new_name, identifier, identifier))
    if new_phone:
        cur.execute("UPDATE phonebook SET phone = %s WHERE first_name = %s OR phone = %s", (new_phone, identifier, identifier))
    conn.commit()

def query_by_pattern(pattern):
    cur.callproc("search_phonebook", [pattern])
    rows = cur.fetchall()
    for row in rows:
        print(row)

def query_paginated(limit, offset):
    cur.callproc("get_paginated_phonebook", [limit, offset])
    rows = cur.fetchall()
    for row in rows:
        print(row)

def insert_many(names, phones):
    try:
        cur.execute("CALL insert_many_users(%s, %s, %s)", (names, phones, None))
        conn.commit()
    except Exception as e:
        print(f"Error during bulk insert: {e}")
        conn.rollback()

def delete_entry(identifier):
    try:
        cur.execute("CALL delete_user(%s)", [identifier])
        conn.commit()
    except Exception as e:
        print(f"Error deleting entry: {e}")
        conn.rollback()

def close_connection():
    cur.close()
    conn.close()

if __name__ == "__main__":
    create_table()
    
    # Пример вызова
    insert_from_console()
    query_by_pattern("Ann")
    query_paginated(5, 0)
    insert_many(['Ivan', 'Oleg', 'Invalid'], ['+77712345678', 'notaphone', '+71234567890'])
    delete_entry('Ivan')

    close_connection()
